import openai
import streamlit as st
from functions import get_generate_responses_schema
from websocket_helpers import connect_to_realtime_api
from audio_helpers import play_audio
import logging
import os
import json

# Logging setup
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, "debug_log.txt")
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s]: %(message)s"
)

# Streamlit setup
st.title("Roleplaying Chatbot with Conversational Memory")

# Initialize session state
if "messages" not in st.session_state:
    st.session_state["messages"] = []

# Import schema for generating multiple responses
functions = get_generate_responses_schema()

# Display chat history
for message in st.session_state["messages"]:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Handle user input
if user_input := st.chat_input("Type your message here..."):
    st.session_state["messages"].append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    # Call OpenAI API with the function schema
    response = openai.ChatCompletion.create(
        model="gpt-4-0613",
        messages=[
            {"role": "system", "content": "You are a friendly conversational assistant."},
            {"role": "user", "content": user_input}
        ],
        functions=functions,
        function_call={"name": "generate_multiple_responses"}
    )

    # Extract responses
    response_data = json.loads(response["choices"][0]["message"]["function_call"]["arguments"])
    acknowledgement = response_data["acknowledgement"]
    follow_up = response_data["follow_up"]

    # Append and display responses
    st.session_state["messages"].append({"role": "assistant", "content": acknowledgement})
    st.session_state["messages"].append({"role": "assistant", "content": follow_up})

    with st.chat_message("assistant"):
        st.markdown(acknowledgement)
    with st.chat_message("assistant"):
        st.markdown(follow_up)
